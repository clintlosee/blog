<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DevThirty5</title>
  <subtitle>DevThirty5 Blog</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://clintlosee.github.io/blog/"/>
  <updated>2016-04-20T15:48:27.000Z</updated>
  <id>http://clintlosee.github.io/blog/</id>
  
  <author>
    <name>Clint Losee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Common React Error</title>
    <link href="http://clintlosee.github.io/blog/2016/04/common-react-error/"/>
    <id>http://clintlosee.github.io/blog/2016/04/common-react-error/</id>
    <published>2016-04-20T15:43:34.000Z</published>
    <updated>2016-04-20T15:48:27.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/common-react-error.jpg&quot; alt=&quot;Common React Error&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;A-React-Error-You-May-Have-Encountered&quot;&gt;&lt;a href=&quot;#A-React-Error-You-May-Have-Encountered&quot; class=&quot;headerlink&quot; title=&quot;A React Error You May Have Encountered&quot;&gt;&lt;/a&gt;A React Error You May Have Encountered&lt;/h2&gt;&lt;p&gt;As I’ve been progressing in my learning and helping others with React, a common error has surfaced in &lt;a href=&quot;https://facebook.github.io/react/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt; development. So I figured I could potentially help some people out who are new to React and provide a solution to what I’ve found on this error.&lt;/p&gt;&lt;p&gt;What’s this error, or warning, you may be asking? Well it’s this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Or this one:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;What causes this? Well here’s what I’ve found can cause this often very frustrating error when you’re starting out in React Development.&lt;/p&gt;&lt;p&gt;Without going into all of the setup and inner-workings of a React site or component, there are two common scenarios I’ve seen that cause these errors. One instance is when setting up routing in your app using &lt;a href=&quot;https://github.com/reactjs/react-router&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;React Router&lt;/a&gt;. In this case, you have your Routes.jsx file (or whatever you name your routing file) and inside that file you have something set up like the following:&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactRouter = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Router = ReactRouter.Router;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Route = ReactRouter.Route;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Base = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/base.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; PageOne = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/pageone.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; PageTwo = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/pageTwo.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Router = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Router&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;Route path=&quot;/PageOne&quot; component= &amp;#123;PageOne&amp;#125;&amp;gt;&amp;lt;/Route&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;Route path=&quot;/pageTwo&quot; component= &amp;#123;PageTwo&amp;#125;&amp;gt;&amp;lt;/Route&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/Router&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = Router;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;You’ll notice when creating var Router it is set up using (…). This isn’t creating a React Class like you usually would with React.createClass. That means you need to set this up differently in your main.jsx file. In that file, when rendering a component with React-DOM you would do something like the following:&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOM = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ListManager = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./components/ListManager.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(&amp;lt;ListManager /&amp;gt;, document.getElementById(&#39;ght&#39;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;However, when rendering your routes file where you did not create a React class, you would need to use the following format (pay attention to the ReactDOM.render method):&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOM = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Routes = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./routers.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(Routes, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;ght&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;When setting up this type of routing, you omit the &amp;lt;… /&amp;gt; from your render method and just use your variable name for your route file. Watch out for that if you are running into this error when starting out learning React. If that isn’t the case, check out the next one.&lt;/p&gt;&lt;h3 id=&quot;Another-Scenario-For-This-React-Error&quot;&gt;&lt;a href=&quot;#Another-Scenario-For-This-React-Error&quot; class=&quot;headerlink&quot; title=&quot;Another Scenario For This React Error&quot;&gt;&lt;/a&gt;Another Scenario For This React Error&lt;/h3&gt;&lt;p&gt;Another scenario I have come across in helping others out with &lt;a href=&quot;https://facebook.github.io/react/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt; is a common error in JavaScript in general.&lt;/p&gt;&lt;p&gt;One of the weird parts of JavaScript has to do with semicolons. Debates abound about this and I’m not going to get into it. ES2015 helps this issue out, but again, that’s another topic.&lt;/p&gt;&lt;p&gt;What I’m talking about is how JavaScript terminates line endings. You may not be aware but JavaScript sees the end of a line and can sometimes insert it’s very own little semicolon without you wanting it to. This can cause huge problems, especially on return statements. Here’s what I’m talking about and where I’ve seen this in React.&lt;/p&gt;&lt;p&gt;Take the following code plucked from a React component:&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; List = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createItem = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text,index&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;ListItem key=&amp;#123; index + text&amp;#125; text = &amp;#123;text&amp;#125; /&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;this.props.items.map(createItem)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;The return statement in the React class shows the return and then the &lt;code&gt;(&lt;/code&gt; on the next line. This is a common coding convention in many other languages, one such is Java. This can cause some major problems in JavaScript though. What you need to make sure you do to format this is as follows (return statement pulled out of the above code for reference):&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;this.props.items.map(createItem)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Move that &lt;code&gt;(&lt;/code&gt; up to directly after your return statement and you can save yourself loads of time researching errors of undefined being returned. It’s a weird one, but it’s out there.&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/images/common-react-error.jpg&quot; alt=&quot;Common React Error&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;A-React-Error-You-May-Have-Encountered&quot;&gt;&lt;a href=&quot;#A-R
    
    </summary>
    
      <category term="Front-End Development, React" scheme="http://clintlosee.github.io/blog/categories/front-end-development-react/"/>
    
    
      <category term="React, JavaScript, Errors" scheme="http://clintlosee.github.io/blog/tags/react-javascript-errors/"/>
    
  </entry>
  
  <entry>
    <title>Animated Borders in CSS3</title>
    <link href="http://clintlosee.github.io/blog/2016/03/animated-borders-in-css3/"/>
    <id>http://clintlosee.github.io/blog/2016/03/animated-borders-in-css3/</id>
    <published>2016-03-08T18:05:20.000Z</published>
    <updated>2016-04-20T15:42:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/animated-borders-css3.jpg&quot; alt=&quot;Animated Borders in CSS3&quot;&gt;&lt;/p&gt;&lt;p&gt;Recently for a project I wanted to utilize a little CSS3 animation for something that was a little outside of the norm of what we typically use. Sometimes utilizing a little bit of animation on something such as a button or link can help to bring a little more attention to it and help the user enjoy their experience on your site.&lt;/p&gt;&lt;p&gt;Previous user testing of our website at my current job resulted in finding out that our website was just plain boring to use. It’s somewhat hard to make an e-commerce site super fun to use ;). We have since implemented some more aesthetic flair to the site to help combat this, and the option of adding a little flair to this new project was right up that alley.&lt;/p&gt;&lt;h2 id=&quot;Animated-Borders-in-CSS3&quot;&gt;&lt;a href=&quot;#Animated-Borders-in-CSS3&quot; class=&quot;headerlink&quot; title=&quot;Animated Borders in CSS3&quot;&gt;&lt;/a&gt;Animated Borders in CSS3&lt;/h2&gt;&lt;p&gt;Basically what I wanted to do was use some state icons for users to click. I didn’t want to do a simple CSS hover effect and be done with it though. I had previously seen a similar effect on &lt;a href=&quot;http://www.codepen.io&quot; title=&quot;Codepen&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;Codepen&lt;/a&gt; for animated the borders of a button. So I wanted to re-create that same effect. &lt;em&gt;(I wish I had the link to the original…I’ll update this as soon as I can find it.)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;350&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;JYjWRW&quot; data-default-tab=&quot;result&quot; data-user=&quot;clintlosee&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/clintlosee/pen/JYjWRW/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;Animated Border Button&lt;/a&gt; by Clint Losee (&lt;a href=&quot;http://codepen.io/clintlosee&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;@clintlosee&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;p&gt;While this isn’t the same exact result I ended up using (I used the icons and animated the borders around those boxes), this effect can be used for many different elements. In this pen I used a button and animated the effect over the button borders. In the end, it was a fun effect that added a little bit of something to the page.&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/images/animated-borders-css3.jpg&quot; alt=&quot;Animated Borders in CSS3&quot;&gt;&lt;/p&gt;&lt;p&gt;Recently for a project I wanted to utilize a litt
    
    </summary>
    
      <category term="Front-End Development" scheme="http://clintlosee.github.io/blog/categories/front-end-development/"/>
    
    
      <category term="CSS3, Animation" scheme="http://clintlosee.github.io/blog/tags/css3-animation/"/>
    
  </entry>
  
  <entry>
    <title>The FizzBuzz Test</title>
    <link href="http://clintlosee.github.io/blog/2015/12/the-fizzbuzz-test/"/>
    <id>http://clintlosee.github.io/blog/2015/12/the-fizzbuzz-test/</id>
    <published>2015-12-22T10:37:32.000Z</published>
    <updated>2016-04-20T15:42:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/The FizzBuzz Test - Couple Riding Bikes.jpg&quot; alt=&quot;The FizzBuzz Test&quot;&gt;&lt;/p&gt;&lt;p&gt;The more and more I read and find new things to learn to help progress my web development career, the more I come across one of the many tests given to programmers in the interview stage: &lt;strong&gt;The FizzBuzz test&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id=&quot;What-is-the-FizzBuzz-Test&quot;&gt;&lt;a href=&quot;#What-is-the-FizzBuzz-Test&quot; class=&quot;headerlink&quot; title=&quot;What is the FizzBuzz Test?&quot;&gt;&lt;/a&gt;What is the FizzBuzz Test?&lt;/h2&gt;&lt;p&gt;Writing a simple program is one of the things I’ve found that are necessary to grasp the basic skills of a language. That is where the FizzBuzz test comes in. The FizzBuzz test is where you are tasked with writing a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”.&lt;/p&gt;&lt;p&gt;This sounds easy enough, but when I first attempted it I got stuck. So more reading and more research helped me through this and I came up with as basic example solution:&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;amp;lt;= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i % &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;FizzBuzz&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Fizz&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i % &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Buzz&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;And after more researching, I came across an even more consolidated and concise version of the above:&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;amp;lt;= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = i % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, b = i % &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f ? b ? &lt;span class=&quot;string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt; : b ? &lt;span class=&quot;string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt; : i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;It still takes me a few times reading through that last version to fully grasp how it is doing what it is in only four lines of code compared to 11. It’s always great to see differing versions of how to solve the same concept.&lt;/p&gt;&lt;p&gt;If you’re trying to get the basics of JavaScript down and are looking for some coding exercises, I highly recommend looking into tests such as &lt;strong&gt;the FizzBuzz Test&lt;/strong&gt; as well and the many JavaScript assessments and articles regarding &lt;a href=&quot;https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;JavaScript interview questions&lt;/a&gt;. They have helped me out tremendously in my journey.&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/images/The FizzBuzz Test - Couple Riding Bikes.jpg&quot; alt=&quot;The FizzBuzz Test&quot;&gt;&lt;/p&gt;&lt;p&gt;The more and more I read and find new 
    
    </summary>
    
      <category term="JavaScript" scheme="http://clintlosee.github.io/blog/categories/javascript/"/>
    
    
      <category term="Development" scheme="http://clintlosee.github.io/blog/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 Background Opacity</title>
    <link href="http://clintlosee.github.io/blog/2015/10/css3-background-opacity/"/>
    <id>http://clintlosee.github.io/blog/2015/10/css3-background-opacity/</id>
    <published>2015-10-19T07:16:01.000Z</published>
    <updated>2016-04-20T15:42:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/blog/images/css3-background-opacity.jpg&quot; alt=&quot;CSS3 Background Opacity&quot;&gt;&lt;/p&gt;&lt;p&gt;Here’s something that I came across recently that proved incredibly useful. Most CSS experts out there are already going to know this one, but for those of you that are just learning, here’s a quick tip that could help you out in the long run.&lt;/p&gt;&lt;h2 id=&quot;Opacity-Problem&quot;&gt;&lt;a href=&quot;#Opacity-Problem&quot; class=&quot;headerlink&quot; title=&quot;Opacity Problem&quot;&gt;&lt;/a&gt;Opacity Problem&lt;/h2&gt;&lt;p&gt;What I needed was to set the background color of a div and then adjust its opacity to give it that cool see-through look. However, when setting the opacity property to something like 0.5 it adjusted the text inside the div along with the background. Not very cool.&lt;/p&gt;&lt;p&gt;Usual CSS block (sets opacity of box and text within it:&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution:&quot;&gt;&lt;/a&gt;Solution:&lt;/h3&gt;&lt;p&gt;Here’s the quick little snippet that I came across that is sure to save you a bunch of time: RGBA values.&lt;/p&gt;&lt;p&gt;Better to use:&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;rgba&lt;/span&gt;(0, 0, 0, 0.5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;That’s right. Set your background color using rgba. The syntax for this is: rgba(0, 0, 0, 0.5). Basically you set your red, green and blue values between 0 and 255. Then you set your opacity level just as you would with opacity such 0.5 for 50% opacity.&lt;/p&gt;&lt;p&gt;You can see an example of this in the following Codepen:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;350&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;RWjadj&quot; data-default-tab=&quot;result&quot; data-user=&quot;clintlosee&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/clintlosee/pen/RWjadj/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;RGBA Example&lt;/a&gt; by Clint Losee (&lt;a href=&quot;http://codepen.io/clintlosee&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;@clintlosee&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;p&gt;The first box shows the RGBA example where the text still has no opacity level applied to it but the background has 50% opacity applied. The second box has the opacity set to 50% but it is applying to the box and text within, making them all lighter than what the intended outcome should be.&lt;/p&gt;&lt;p&gt;For the CSS veterans out there, this won’t be anything new. But for those getting into CSS, it can be a huge help.&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/images/css3-background-opacity.jpg&quot; alt=&quot;CSS3 Background Opacity&quot;&gt;&lt;/p&gt;&lt;p&gt;Here’s something that I came across recently tha
    
    </summary>
    
      <category term="CSS" scheme="http://clintlosee.github.io/blog/categories/css/"/>
    
    
      <category term="Development" scheme="http://clintlosee.github.io/blog/tags/development/"/>
    
      <category term="Front-End" scheme="http://clintlosee.github.io/blog/tags/front-end/"/>
    
  </entry>
  
</feed>
